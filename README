
             LablGTK2 alpha : an interface to the GIMP Tool Kit

Needed:
	ocaml-3.06
	gtk-2.x
	GNU make (there is no standard for conditionals)

Info/upgrades:
        http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/lablgtk.html

Status:
  Contrary to lablgtk, which is a mature interface to gtk-1.2,
  lablgtk2 is still in early development.
  
  Support for the old text widget has been dropped, but it is
  remplaced by a new one, much more powerful (thanks to Benjamin
  Monate). However its API is not yet fixed. In particular text
  iterators are not foolproof, and may cause exceptions (hopefully
  segmentation faults should be avoided, contrary to the gtk-2
  "specification").

  In other widgets many methods are missing, and will be progressively
  added, as we review the changes. Requests may be considered.

  Another important change in gtk-2 is the use of unicode (utf8) for
  all strings. If you use non-ascii strings, you must imperatively
  convert them to unicode. This can be done with the
  [Glib.Convert.locale_to_utf8] function. If your input is already in
  utf8, it is still a good idea to validate it with
  Glib.Utf8.validate, as malformed utf8 strings may cause segmentation
  faults.
  Note that setlocale is now always called (except if you set
  GTK_SETLOCALE to 0 in the environment), but LC_NUMERIC is reverted
  to "C" to avoid problems with floating point conversion in Caml.

How to compile:

	You should normally not need to modify Makefiles.
	First type "make configure <options>".
	Options are
                USE_DOTOPT=1    to use ocaml.opt and ocamlopt.opt
		USE_CC=1	to use $(CC) rather than gcc
		USE_GL=1	not supported yet
		USE_GNOME=1	not supported yet
                USE_GLADE=1     not supported yet
        The following variables will also be remembered if passed as options
                BINDIR INSTALLDIR DLLDIR DEBUG CC
                CAMLC CAMLOPT CAMLMKTOP CAMLMKLIB CAMLP40
        or you may directly edit config.make.
        Note that if you change DLLDIR, you should add the new directory
        either to OCAMLLIB/ld.conf or to CAML_LD_LIBRARY_PATH before
	running programs.
        If gtk-config has a different name, you can set the GTK_CONFIG
        variable  to it (e.g. FreeBSD).

	Then just type "make" to build the library and toplevels.
	"make opt" to compile native libraries.
	"make install" installs to the default locations.

Contents:

	gdk.ml		low-level interface to the General Drawing Kit
	gtk.ml		low-level interface to the GIMP Tool Kit
	gtkThread.ml	main loop for threaded version
	g[A-Z]*.ml	object-oriented interface to GTK
	gdkObj.ml	object-oriented interface to GDK

	lablgtk2	toplevel

	examples/*.ml	various examples

How to run the examples:
  In the examples directory just type:
	lablgtk2 ???.ml

  Before installing lablgtk2 you have to be more explicit:
        setenv CAML_LD_LIBRARY_PATH ../src  (or export CAML..PATH=../src)
	../src/lablgtktop -w s -I ../src ???.ml

How to link them:
  lablgtktop contains an extra module GtkInit, whose only contents is:
        let locale = GtkMain.Main.init ()
  You must either add this line, or add this module to your link,
  before calling any Gtk function.
  ocamlc -I +lablgtk2 -w s lablgtk.cma gtkInit.cmo ???.ml -o ???

How to use the threaded toplevel:

	% lablgtk2 -thread           (or ./lablgtktop_t before installing)
	        Objective Caml version 3.06
	
	# let w = GWindow.window ~show:true ();;
        # let b = GButton.button ~packing:w#add ~label:"Hello!" ();;

  You should at once see a window appear, and then a button.
  The GTK main loop is running in a separate thread. Any command
  is immediately reflected by the system.
  Beware that with bytecode threads, you cannot switch threads within
  a callback. The only thread related command you may use in a
  callback is Thread.create. Calling blocking operations may cause
  deadlocks. On the other hand, all newly created threads will be run
  outside of the callback, so they can use all thread operations.
  There is no such problem for posix and win32 threads, but win32
  threads have problems of their own. See the windows port section
  lower.

  When using threads in a stand-alone application, you must link with
  gtkThread.cmo and call GtkThread.main in place of GMain.main.

Structure of the (raw) Gtk* modules:

  These modules are composed of one submodule for each class.
  Signals specific to a widget are in a Signals inner module.
  A setter function is defined to give access to set_param functions.

Structure of the G[A-Z]* modules:

  These modules provide classes to wrap the raw function calls.
  Here are the widget classes contained in each module:

  GDraw         Gdk pixmaps, etc...
  GObj		gtkobj, widget, style
  GData		data, adjustment, tooltips
  GContainer	container, item_container
  GWindow	window, dialog, color_selection_dialog, file_selection, plug
  GPack		box, button_box, table, fixed, layout, packer, paned, notebook
  GBin  	scrolled_window, event_box, handle_box, frame,
		aspect_frame, viewport, socket
  GButton	button, toggle_button, check_button, radio_button, toolbar
  GMenu		menu_item, tearoff_item, check_menu_item, radio_menu_item,
		menu_shell, menu, option_menu, menu_bar, factory
  GMisc		separator, statusbar, calendar, drawing_area,
		misc, arrow, image, pixmap, label, tips_query,
                color_selection, font_selection
  GTree		tree_item, tree
  GList		list_item, liste, clist
  GEdit		editable, entry, spin_button, combo
  GRange	progress, progress_bar, range, scale, scrollbar
  GText		view (also buffer, iter, mark, tag, tagtable)

  While subtyping follows the Gtk widget hierarchy, you cannot always
  use width subtyping (i.e. #super is not unifiable with all the
  subclasses of super). Still, it works for some classes, like
  #widget and #container, and allows subtyping without coercion towards
  these classes (cf. #container in examples/pousse.ml for instance).

  Practically, each widget class is composed of:
  * a coerce method, returning the object coerced to the type widget.
  * an as_widget method, returning the raw Gtk widget used for packing, etc...
  * a connect sub-object, allowing one to widget specific
    signals (this is what prevents width subtyping in subclasses.)
  * a misc sub-object, giving access to miscellanous functionality of
    the basic gtkwidget class, and a misc#connect sub-object.
  * an event sub-object, for Xevent related functions (only if the widget
    has an Xwindow), and an event#connect sub-object.
  * a grab sub-object, containing drag and drop functions,
    and a grab#connect sub-object.
  * widget specific methods.

  Here is a diagram of the structure (- for methods, + for sub-objects)
        - coerce : widget
        - as_widget : Gtk.widget obj
        - destroy : unit -> unit
        - ...
        + connect : mywidget_signals
        |   - after
        |   - signal_name : callback:(... -> ...) -> GtkSignal.id
        + misc : misc_ops
        |   - show, hide, disconnect, ...
        |   + connect : misc_signals
        + event : event_ops
        |   - add, ...
        |   + connect : event_signals
        + grab : grab_ops
        |   - ...
        |   + connect : grab_signals

  You create a widget by [<Module>.<widget name> options ... ()].
  Many optional arguments are admitted. The last two of them, packing:
  and show:, allow you respectively to call a function on your newly
  created widget, and to decide wether to show it immediately or not.
  By default all widgets except toplevel windows (GWindow module) are
  shown immediately.

Default arguments:
  For many constructor or method arguments, default values are provided.
  Generally, this default value is defined by GTK, and you must refer
  to GTK's documentation.
  For ML defined defaults, usually default values are either false, 0, None
  or `NONE, according to the expected type.
  Important exceptions are ~show, which default to true in all widgets
  except those in GWindow, and ~fill, which defaults to true or `BOTH.

Note about unit as method argument:

  O'Caml introduces no distinction between methods having side-effects
  and methods simply returning a value. In practice, this is
  confusing, and awkward when used as callbacks. For this reason all
  methods having noticeable side-effects should take arguments, and
  unit if they have no argument.

ML-side signals:

  The GUtil module provides two kinds of utilities: a memo table, to be
  able to dynamically cast widgets to their original class, and more
  interesting ML-side signals.
  With ML-side signals, you can combine LablGTK widgets into your own
  components, and add signals to them. Later you can connect to these
  signals, just like GTK signals. This proved very efficient to
  develop complex applications, abstracting the plumbing between
  various components. Explanations are provided in GUtil.mli.

Contributed components:

  The GToolbox module contains contributed components to help you build
  your applications.

Memory management:

  Important efforts have been dedicated to cooperate with Gtk's
  reference counting mechanism. As a result you should generally be
  able to use Gdk/Gtk data structures without caring about memory
  management. They will be freed when nobody points to them any more.
  This also means that you do not need to pay too much attention to
  whether a data structure is still alive or not. If it is not, you
  should get an error rather than a core dump.
  The case of Gtk objects deserves special care. Since they are
  interactive, we cannot just destroy them when they are no longer
  referenced. They have to be explicitely destroyed. If a widget was
  added to a container widget, it will automatically be destroyed when
  its last container is destroyed. For this reason you need only
  destroy toplevel widgets.

Windows port

  Windows is not explicitely supported in this release, but adapting
  it to work on windows should not be particularly difficult.

Authors:
	Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
	Benjamin Monate <monate@lix.polytechnique.fr>
  For lablgtk1:
	Hubert Fauque  <hubert.fauque@wanadoo.fr>
	Jun Furuse     <Jun.Furuse@inria.fr>
	Koji Kagawa    <kagawa@eng.kagawa-u.ac.jp>
				   
Bug reports:
	Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>

$Id$
