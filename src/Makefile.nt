# $Id$
# Makefile for lablgtk.

EXE = .exe
TARGETS = varcc lablgtktop$(EXE) lablgtktop_t$(EXE)

all: $(TARGETS)

opt: lablgtkopt

depend:
	ocamldep *.ml *.mli > .depend

COMPILER = $(CAMLC) $(MLFLAGS) -w s -c
LINKER = $(CAMLC) $(MLFLAGS)
COMPOPT = $(CAMLOPT) $(MLFLAGS) -w s -c
LINKOPT = $(CAMLOPT) $(MLFLAGS)
MKLIB = lib /nologo /debugtype:CV /out:
MKDLL = link /nologo /dll "`ocamlc -where`/ocamlrun.lib" /out:
TOPLEVEL = ocamlmktop $(MLFLAGS)
CAMLP4 = camlp4o -I "$(LIBDIR)/camlp4" pr_o.cmo
CONFIG = ../config.make.nt
DLLDIR = $(LIBDIR)/stublibs

include $(CONFIG)

INSTALLDIR = $(LIBDIR)/lablgtk2
BINDIR = $(LIBDIR)/../bin
LABLGLDIR = $(LIBDIR)/lablGL

MLLIBS = lablgtk.cma
CLIBS = liblablgtk2.lib
MLLINK = unix.cma str.cma

CFLAGS = -O  -DG_DISABLE_CAST_CHECKS $(GTKCFLAGS)

THFLAGS = -thread
THLINK = unix.cma threads.cma

ifeq ($(USE_GL), 1)
MLFLAGS += -I "$(LABLGLDIR)"
MLLINK += lablgl.cma
MLLIBS += lablgtkgl.cma
CLIBS += liblablgtkgl.lib
GLLINK = -cclib -llablgtkgl -cclib -lgtkgl
GLMLOBJS = glGtk.cmo
GLCOBJS = ml_gtkgl.obj
endif

# Rules
.SUFFIXES: .ml .mli .cmo .cmi .cmx .c .obj .d.obj .var .h .opt .def .ml4
.c.obj:
	$(COMPILER) -verbose -ccopt "$(CFLAGS)" $<
.c.d.obj:
	$(COMPILER) -verbose -ccopt "/MD /Fo$@ $(CFLAGS)" $<
.ml.cmo:
	$(COMPILER) $<
.mli.cmi:
	$(COMPILER) $<
.ml.cmx:
	$(COMPOPT) $<
.var.h:
	ocamlrun ./varcc $<
.ml4.ml:
	$(CAMLP4) -impl $< -o $@

# Targets
GTKOBJS =  ml_gtk.obj ml_pango.obj ml_gtkbin.obj ml_gtkbutton.obj ml_gtkedit.obj \
	ml_gtklist.obj \
	ml_gtkmenu.obj ml_gtkmisc.obj ml_gtkpack.obj ml_gtkrange.obj ml_gtktree.obj \
	ml_gtktext.obj
COBJS = ml_gdkpixbuf.obj ml_gdk.obj ml_glib.obj ml_gobject.obj ml_gpointer.obj \
	wrappers.obj $(GTKOBJS)
MLOBJS =  gaux.cmo gpointer.cmo glib.cmo gobject.cmo \
	gdk.cmo gdkEvent.cmo gdkKeysyms.cmo gdkPixbuf.cmo \
	gtk.cmo pango.cmo gtkSignal.cmo \
	gtkData.cmo gtkBase.cmo gtkPack.cmo gtkButton.cmo \
	gtkMenu.cmo gtkMisc.cmo gtkWindow.cmo gtkList.cmo \
	gtkBin.cmo gtkEdit.cmo gtkRange.cmo gtkTree.cmo gtkMain.cmo \
	gtkText.cmo \
	gDraw.cmo \
	gObj.cmo gMain.cmo gData.cmo gContainer.cmo gPack.cmo gButton.cmo \
	gText.cmo \
	gMenu.cmo gMisc.cmo gWindow.cmo gList.cmo gBin.cmo \
	gEdit.cmo gRange.cmo gTree.cmo gUtil.cmo gToolbox.cmo
THOBJS = gtkThread.cmo
INITOBJS = gtkInit.cmo
THINITOBJS = gtkThInit.cmo
ALLOBJS = $(MLOBJS) $(GLMLOBJS) $(GNOMEMLOBJS) $(GLADEMLOBJS) $(THOBJS) \
	$(INITOBJS) $(THINITOBJS)

lablgtktop$(EXE): $(CLIBS) $(MLLIBS) $(INITOBJS)
	$(TOPLEVEL) -o $@ $(MLLINK) -I . $(MLLIBS) $(INITOBJS)

lablgtktop_t$(EXE): $(CLIBS) $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS)
	$(TOPLEVEL) $(THFLAGS) -o $@ $(THLINK) $(MLLINK) \
	   -I . $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS)

lablgtkopt: $(CLIBS) $(MLLIBS:.cma=.cmxa) $(INITOBJS:.cmo=.cmx) \
	$(THOBJS:.cmo=.cmx)

install:
	@if test -d "$(INSTALLDIR)"; then :; else mkdir -p "$(INSTALLDIR)"; fi
	@if test -d "$(BINDIR)"; then :; else mkdir -p "$(BINDIR)"; fi
	cp lablgtk2.bat "$(BINDIR)"
	cp $(ALLOBJS:.cmo=.cmi) "$(INSTALLDIR)"
	cp *.mli "$(INSTALLDIR)"
	cp $(ALLOBJS:.cmo=.ml) "$(INSTALLDIR)"
	cp $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS) "$(INSTALLDIR)"
	cp $(CLIBS) "$(INSTALLDIR)"
	cp $(CLIBS:lib%.lib=dll%.dll) "$(DLLDIR)"
	cp varcc *.h "$(INSTALLDIR)"
	if test -f lablgtk.cmxa; then \
	   cp $(MLLIBS:.cma=.cmxa) $(MLLIBS:.cma=.lib) \
	      $(INITOBJS:.cmo=.cmx) $(INITOBJS:.cmo=.obj) "$(INSTALLDIR)"; fi
	if test -f gtkThread.cmx; then \
	   cp $(THOBJS:.cmo=.cmx) $(THOBJS:.cmo=.obj) "$(INSTALLDIR)"; fi

liblablgtk2.lib: $(COBJS)
	$(MKLIB)$@ $(COBJS)
dlllablgtk2.dll: $(COBJS:.obj=.d.obj)
	$(MKDLL)$@ $(COBJS:.obj=.d.obj) $(GTKLIBS)

lablgtk.cma: liblablgtk.lib dlllablgtk.dll $(MLOBJS)
	$(LINKER) -a -o $@ $(MLOBJS) \
	  -dllib -llablgtk -cclib -llablgtk -cclib "$(GTKLIBS)"
lablgtk.cmxa: $(MLOBJS:.cmo=.cmx)
	$(LINKOPT) -a -o $@ $(MLOBJS:.cmo=.cmx) \
	  -cclib -llablgtk -cclib "$(GTKLIBS)"

gtkThread.cmo: gtkThread.ml
	$(COMPILER) $(THFLAGS) gtkThread.ml

gtkThread.cmi: gtkThread.mli
	$(COMPILER) $(THFLAGS) gtkThread.mli

gtkThread.cmx: gtkThread.ml
	$(COMPOPT) $(THFLAGS) gtkThread.ml

varcc: varcc.cmo
	$(LINKER) -o $@ $<
	rm -f *_tags.h *_tags.c

clean:
	rm -f *.cm* *.obj *.lib *_tags.[ch] $(TARGETS) varcc.ml

$(GTKOBJS): gtk_tags.h ml_gtk.h ml_gdk.h ml_pango.h ml_gobject.h ml_glib.h wrappers.h
ml_glib.obj: glib_tags.h ml_glib.h wrappers.h
ml_gobject.obj: gobject_tags.h wrappers.h
ml_gdk.obj: gdk_tags.h ml_gdk.h ml_gpointer.h wrappers.h
ml_gtkgl.obj: gtkgl_tags.h ml_gtk.h ml_gdk.h wrappers.h
ml_gtkxmhtml.obj: gtkxmhtml_tags.h ml_gtk.h ml_gdk.h wrappers.h
ml_gpointer.obj: ml_gpointer.h
ml_gdkpixbuf.obj: gdkpixbuf_tags.h ml_gdk.h gdk_tags.h wrappers.h ml_gpointer.h
ml_pango.obj: ml_pango.h

include .depend
